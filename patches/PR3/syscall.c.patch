diff --git a/syscall.c b/syscall.c
index d92074aa..ca0d80e1 100644
--- a/syscall.c
+++ b/syscall.c
@@ -77,6 +77,66 @@ struct create_time {
 
 #define RETURN_ERROR_IF_RO_OR_LO RETURN_ERROR_IF(read_only || list_only, EROFS)
 
+#ifdef __MVS__
+#  define LINUX_S_IFIFO	      0010000	/* [XSI] named pipe (fifo) */
+#  define LINUX_S_IFCHR	      0020000	/* [XSI] character special */
+#  define LINUX_S_IFDIR	      0040000	/* [XSI] directory */
+#  define LINUX_S_IFBLK	      0060000   /* [XSI] block special */
+#  define LINUX_S_IFREG	      0100000   /* [XSI] regular */
+#  define LINUX_S_IFLNK	      0120000   /* [XSI] symbolic link */
+#  define LINUX_S_IFSOCK      0140000   /* [XSI] socket */
+
+#  define ZOS_S_IFIFO       0x04000000	/* named pipe (fifo) */
+#  define ZOS_S_IFCHR       0x02000000	/* character special */
+#  define ZOS_S_IFDIR       0x01000000	/* directory */
+#  define ZOS_S_IFBLK       0x06000000	/* block special */
+#  define ZOS_S_IFREG       0x03000000	/* regular */
+#  define ZOS_S_IFLNK       0x05000000	/* symbolic link */
+#  define ZOS_S_IFSOCK      0x07000000  /* socket */
+
+/*
+ * z/OS has a 'mode_t' that is 32 bits in size, whereas
+ * Linux has a 'mode_t' that is 16 bits in size.
+ * The bottom 3 nibbles are the same, but z/OS uses
+ * the top word for the st_mode parts of mode and
+ * Linux uses the top nibble
+ */
+static inline mode_t 
+to_linux_mode(unsigned int inmode)
+{
+  mode_t outmode = (mode_t) (inmode & 0x0FFF);
+
+  if (inmode & ZOS_S_IFIFO) { outmode |= LINUX_S_IFIFO; }
+  if (inmode & ZOS_S_IFCHR) { outmode |= LINUX_S_IFCHR; }
+  if (inmode & ZOS_S_IFDIR) { outmode |= LINUX_S_IFDIR; }
+  if (inmode & ZOS_S_IFBLK) { outmode |= LINUX_S_IFBLK; }
+  if (inmode & ZOS_S_IFREG) { outmode |= LINUX_S_IFREG; }
+  if (inmode & ZOS_S_IFLNK) { outmode |= LINUX_S_IFLNK; }
+  if (inmode & ZOS_S_IFSOCK) { outmode |= LINUX_S_IFSOCK; }
+  return outmode;
+}
+
+static inline unsigned int
+to_zos_mode(mode_t mode)
+{
+  unsigned int outmode = (unsigned int) (inmode & 0x0FFF);
+
+  if (inmode & LINUX_S_IFIFO) { outmode |= ZOS_S_IFIFO; }
+  if (inmode & LINUX_S_IFCHR) { outmode |= ZOS_S_IFCHR; }
+  if (inmode & LINUX_S_IFDIR) { outmode |= ZOS_S_IFDIR; }
+  if (inmode & LINUX_S_IFBLK) { outmode |= ZOS_S_IFBLK; }
+  if (inmode & LINUX_S_IFREG) { outmode |= ZOS_S_IFREG; }
+  if (inmode & LINUX_S_IFLNK) { outmode |= ZOS_S_IFLNK; }
+  if (inmode & LINUX_S_IFSOCK) { outmode |= ZOS_S_IFSOCK; }
+
+  return outmode;
+}
+
+#define to_native_mode(inmode) (to_zos_mode(inmode))
+#else
+#define to_native_mode(inmode) (inmode)
+#endif
+
 int do_unlink(const char *path)
 {
 	if (dry_run) return 0;
@@ -163,7 +223,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 
 	/* For --fake-super, we create a normal file with mode 0600. */
 	if (am_root < 0) {
-		int fd = open(pathname, O_WRONLY|O_CREAT|O_TRUNC, S_IWUSR|S_IRUSR);
+		int fd = open(pathname, O_WRONLY|O_CREAT|O_TRUNC, to_native_mode(S_IWUSR|S_IRUSR));
 		if (fd < 0 || close(fd) < 0)
 			return -1;
 		return 0;
@@ -171,7 +231,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 
 #if !defined MKNOD_CREATES_FIFOS && defined HAVE_MKFIFO
 	if (S_ISFIFO(mode))
-		return mkfifo(pathname, mode);
+		return mkfifo(pathname, to_native_mode(mode));
 #endif
 #if !defined MKNOD_CREATES_SOCKETS && defined HAVE_SYS_UN_H
 	if (S_ISSOCK(mode)) {
@@ -200,7 +260,7 @@ int do_mknod(const char *pathname, mode_t mode, dev_t dev)
 	}
 #endif
 #ifdef HAVE_MKNOD
-	return mknod(pathname, mode, dev);
+	return mknod(pathname, to_native_mode(mode), dev);
 #else
 	return -1;
 #endif
@@ -213,8 +273,30 @@ int do_rmdir(const char *pathname)
 	return rmdir(pathname);
 }
 
+#ifdef __MVS__
+ #if (__CHARSET_LIB == 1)
+#   include <stdio.h>
+#   include <stdlib.h>
+
+    static int setccsid(int fd, int ccsid)
+    {
+      attrib_t attr;
+      int rc;
+
+      memset(&attr, 0, sizeof(attr));
+      attr.att_filetagchg = 1;
+      attr.att_filetag.ft_ccsid = ccsid;
+      attr.att_filetag.ft_txtflag = 1;
+
+      rc = __fchattr(fd, &attr, sizeof(attr));
+      return rc;
+    }
+  #endif
+#endif
+
 int do_open(const char *pathname, int flags, mode_t mode)
 {
+  int fd;
 	if (flags != O_RDONLY) {
 		RETURN_ERROR_IF(dry_run, 0);
 		RETURN_ERROR_IF_RO_OR_LO;
@@ -225,7 +307,8 @@ int do_open(const char *pathname, int flags, mode_t mode)
 		flags |= O_NOATIME;
 #endif
 
-	return open(pathname, flags | O_BINARY, mode);
+	fd = open(pathname, flags | O_BINARY, to_native_mode(mode));
+  return fd;
 }
 
 #ifdef HAVE_CHMOD
@@ -240,7 +323,7 @@ int do_chmod(const char *path, mode_t mode)
 	switch (switch_step) {
 #ifdef HAVE_LCHMOD
 	case 0:
-		if ((code = lchmod(path, mode & CHMOD_BITS)) == 0)
+		if ((code = lchmod(path, to_native_mode(mode & CHMOD_BITS))) == 0)
 			break;
 		if (errno == ENOSYS)
 			switch_step++;
@@ -252,7 +335,7 @@ int do_chmod(const char *path, mode_t mode)
 		if (S_ISLNK(mode)) {
 # if defined HAVE_SETATTRLIST
 			struct attrlist attrList;
-			uint32_t m = mode & CHMOD_BITS; /* manpage is wrong: not mode_t! */
+			uint32_t m = to_native_mode(mode & CHMOD_BITS); /* manpage is wrong: not mode_t! */
 
 			memset(&attrList, 0, sizeof attrList);
 			attrList.bitmapcount = ATTR_BIT_MAP_COUNT;
@@ -265,7 +348,7 @@ int do_chmod(const char *path, mode_t mode)
 			code = 1;
 # endif
 		} else
-			code = chmod(path, mode & CHMOD_BITS); /* DISCOURAGED FUNCTION */
+			code = chmod(path, to_native_mode(mode & CHMOD_BITS)); /* DISCOURAGED FUNCTION */
 		break;
 	}
 	if (code != 0 && (preserve_perms || preserve_executability))
@@ -320,7 +403,7 @@ int do_mkdir(char *path, mode_t mode)
 	if (dry_run) return 0;
 	RETURN_ERROR_IF_RO_OR_LO;
 	trim_trailing_slashes(path);
-	return mkdir(path, mode);
+	return mkdir(path, to_native_mode(mode));
 }
 
 /* like mkstemp but forces permissions */
@@ -335,7 +418,7 @@ int do_mkstemp(char *template, mode_t perms)
 		int fd = mkstemp(template);
 		if (fd == -1)
 			return -1;
-		if (fchmod(fd, perms) != 0 && preserve_perms) {
+		if (fchmod(fd, to_native_mode(perms)) != 0 && preserve_perms) {
 			int errno_save = errno;
 			close(fd);
 			unlink(template);
@@ -343,7 +426,12 @@ int do_mkstemp(char *template, mode_t perms)
 			return -1;
 		}
 #if defined HAVE_SETMODE && O_BINARY
-		setmode(fd, O_BINARY);
+		setmode(fd, to_native_mode(O_BINARY));
+#endif
+#ifdef __MVS__
+  #if (__CHARSET_LIB == 1)
+    setccsid(fd, 819);
+  #endif
 #endif
 		return fd;
 	}
@@ -710,5 +798,10 @@ int do_open_nofollow(const char *pathname, int flags)
 	}
 #endif
 
+#ifdef __MVS__
+  #if (__CHARSET_LIB == 1)
+    setccsid(fd, 819);
+  #endif
+#endif  
 	return fd;
 }
